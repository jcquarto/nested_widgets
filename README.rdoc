README for nested_widget demo app

What I wanted to do

1a) come up with a way for the apotomo dashboards to be full Model objects -- because each has certain data associated with it
1b) push the definition of which widgets each dashboard has into a file outside of dashboard
1c) nest widgets -- if needed -- when I have a specific widget layout and I want to create diff't types of widgets that only change what they shove into the content div of the parent Base widget

2) ???
3) Profit 

How these goals are met:

solution 1a + 1b :
At first I tried putting the has_widgets block in a Module, then calling a before: filter on the :show method, looking up that particular dashboard from its Model, grabbing the Module name from the dashboard instance, and then use a case statement to dynamically include that particular Module. The case method works fine for  limited number of dashboard, but long-term I'd have to switch to some sort of dynamic Module name that can do something along the lines of "include #{@dashboard.module_name}". That's not syntaxically correct but I know Ruby can do this, perhaps with the Object.extends() method. I've left the code in there, unused, for reference

My second solution, was to simply subclass the Dashboard controller, throw the has_widgets block at the top of the subclass, then have its show method simply call super -- so that the Dashboard's show method does all the work (except now the given dashboard is already instantiated so the DashboardController needn't do that). This requires some hand-coding of the routes file. I don't love this solution but it's fairly straight-forward, and I do want to be able to use routing which mimics the name of the dashboard (and sub-dashboards eventually?) so this isn't that awful

To the see the above in action, check out localhost/alpha and localhost/beta

solution 1c:

i'm looking at a standardized widget like:

<div class="widget">
	<div class="widget_header">I am a header</div>
	<div class="widget_content">
		<div class="content center">I am content</div>
		<div class="top_right corner">top right</div>
		<div class="top_left corner">top left</div>
		<div class="bottom_right corner">bottom right</div>
		<div class="bottom_left corner">bottom left</div>
	</div>
</div>

so I want the Base widget to take care of the "widget" and "widget_header" portion and then the children widgets to be responsible for filling in "content" (note that the class "center" is just something I added in to center the content div in the middle of the widget wherein a widget must have fixed width and height -- none of that is relevant to this demo app)

in my first attempt, I had the base widget set up by the dashboard, and then let the base widget set up its children. I don't really like this because my widgets are all going to be diff't, so the base shouldn't know what sort of widget they are, but the children should just pump their content into the content div of the base widget.  You can examine my attempt to code this by calling localhost/gamma, which makes use of the Base and Child widgets

in my second attempt, I questioned whether I need widget nesting. Perhaps all I want is for the Base Widget to not be a widget at all but rather just a layout for all widgets. This can be see in localhost/delta, which works, because it puts all the has_widgets call responsibility in the specific dashboard, and each widget employed can choose to have it's display method use render :layout => 'base' . Note that you'll have to do a View Source to see the div structure since I didn't bother to include the CSS for the examples.

My last question centers on the idea that I don't want to display the widget content all at once; rather I'd like to display the absolute basic with no content (or a "spinner" graphic) which the page waits for jquery's document.ready(), and then each widget fires off an ajax request to go get its content.  

Questions here include:  can't I write generic "fire this off after docuemtn.ready" call in the *base layout* since it is to be done for all widgets -- if so, how to generically pass along info that may be needed? And also, since the display method for each widget is not really used until that ajax call, then must I then rename it? Isn't display auto-called on each widget when it loads?